import sys
import socket
import crypt
import time


'''Qt bindings for core Qt functionalities (non-GUI)'''
from PyQt5.QtWidgets import QMainWindow, QApplication, QDialog, QLineEdit
from PyQt5 import QtCore
import mysql.connector as mariadb

'''Subscripts'''

from mainwindow import Ui_MainWindow  # import the MainWindow widget from the converted files from .ui to .py
from pincode import Ui_pincode
from userlogin_manual import Ui_userlogin_manual
from register_user import Ui_RegisterUser

'''Setup of the GUI with associated functions for buttons'''


class MainWindow(QMainWindow, Ui_MainWindow):
    #todo: relese button, long info on coffee
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)  # initialization of the superclass
        #Uncomment below to remove topbar and frame. Taken out for during development.
        #self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setupUi(self)  # setup the GUI --> function generated by pyuic4/pyuic5 depending on QT version
        self.loginout_b.clicked.connect(self.loginout)
        self.button_A.clicked.connect(self.selectA)
        self.button_B.clicked.connect(self.selectB)
        self.regandbalance_b.clicked.connect(self.registerandbalance)
        #self.Coffee_A.mousePressEvent()

    def loginout(self):
        #If logged in user.name will contain a value. If user.name is NULL one can login.
        #First check if a user is logged in. Then log out and rename button. If not - Login.
        if user.name == 'NULL':
            dmw.hide()
            dmf.showFullScreen()
            dmf.user_email.clear()

        if user.name != 'NULL':
            user.reset()
            dmw.user_name.setText("Not logged in.")
            dmw.loginout_b.setText("Login")

    def selectA(self):
        print("A selected.\n")

    def selectB(self):
        print("B selected.\n")

    def registerandbalance(self):
        if user.email == "NULL":
            print("good")
            dmw.hide()
            dmr.fname=""
            dmr.sname=""
            dmr.email=""
            dmr.phone=""
            dmr.pin=""
            dmr.state="1"
            dmr.showFullScreen()

        if user.email != "NULL":
            print("Will grep for balance.")


class UserLoginM(QDialog, Ui_userlogin_manual):
    def __init__(self, parent=None):
        super(UserLoginM, self).__init__(parent)
        self.state = '1'
        self.email = ''
        self.pin = ''
        self.tries = 0
        self.setupUi(self)
        self.user_email.clear()
        self.pushButton_Ok.clicked.connect(self.submit)
        self.pushButton_cancel.clicked.connect(self.cancel)
        self.pushButton_del.clicked.connect(self.LoginPushDel)
        self.pushButton_a.clicked.connect(self.LoginPushA)
        self.pushButton_b.clicked.connect(self.LoginPushB)
        self.pushButton_c.clicked.connect(self.LoginPushC)
        self.pushButton_d.clicked.connect(self.LoginPushD)
        self.pushButton_e.clicked.connect(self.LoginPushE)
        self.pushButton_f.clicked.connect(self.LoginPushF)
        self.pushButton_g.clicked.connect(self.LoginPushG)
        self.pushButton_h.clicked.connect(self.LoginPushH)
        self.pushButton_i.clicked.connect(self.LoginPushI)
        self.pushButton_j.clicked.connect(self.LoginPushJ)
        self.pushButton_k.clicked.connect(self.LoginPushK)
        self.pushButton_l.clicked.connect(self.LoginPushL)
        self.pushButton_m.clicked.connect(self.LoginPushM)
        self.pushButton_n.clicked.connect(self.LoginPushN)
        self.pushButton_o.clicked.connect(self.LoginPushO)
        self.pushButton_p.clicked.connect(self.LoginPushP)
        self.pushButton_q.clicked.connect(self.LoginPushQ)
        self.pushButton_r.clicked.connect(self.LoginPushR)
        self.pushButton_s.clicked.connect(self.LoginPushS)
        self.pushButton_t.clicked.connect(self.LoginPushT)
        self.pushButton_u.clicked.connect(self.LoginPushU)
        self.pushButton_v.clicked.connect(self.LoginPushV)
        self.pushButton_w.clicked.connect(self.LoginPushW)
        self.pushButton_x.clicked.connect(self.LoginPushX)
        self.pushButton_y.clicked.connect(self.LoginPushY)
        self.pushButton_z.clicked.connect(self.LoginPushZ)
        self.pushButton_ae.clicked.connect(self.LoginPushAE)
        self.pushButton_oe.clicked.connect(self.LoginPushOE)
        self.pushButton_aa.clicked.connect(self.LoginPushAA)
        self.pushButton_dot.clicked.connect(self.LoginPushDot)
        self.pushButton_dash.clicked.connect(self.LoginPushDash)
        self.pushButton_alfa.clicked.connect(self.LoginPushAlpha)
        self.pushButton_one.clicked.connect(self.LoginPushOne)
        self.pushButton_two.clicked.connect(self.LoginPushTwo)
        self.pushButton_three.clicked.connect(self.LoginPushThree)
        self.pushButton_four.clicked.connect(self.LoginPushFour)
        self.pushButton_five.clicked.connect(self.LoginPushFive)
        self.pushButton_six.clicked.connect(self.LoginPushSix)
        self.pushButton_seven.clicked.connect(self.LoginPushSeven)
        self.pushButton_eight.clicked.connect(self.LoginPushEight)
        self.pushButton_nine.clicked.connect(self.LoginPushNine)
        self.pushButton_zero.clicked.connect(self.LoginPushZero)
        self.emailShorts.activated.connect(self.emailactivated)

    def emailactivated(self):
        #1 scan text, remove old email if exist, insert new email.
        text=self.user_email.text()
        if '@' in text:
            text=text.split('@')[0]
            self.user_email.clear()
            self.user_email.insert(text + self.emailShorts.currentText())
            return
        self.user_email.insert(self.emailShorts.currentText())

    def submit(self):
        if self.state == '1':
            print("godag")
            self.email = self.user_email.text()  # Setting user.name to user class. Will be used when checking pin code.
            print(self.email)
            self.label.setText('Enter your pin code:')
            self.user_email.clear()
            self.emailShorts.hide()
            self.state = '2'
            return

        if self.state == '2':
            print("Hello")
            self.pin = self.user_email.text()
            print(self.pin +"\n")
            self.pin = crypt.crypt(self.pin, self.email)
            print("Hashed pin typed "+ self.pin + "\n")

            pinquery = "SELECT passwordhash FROM User WHERE Email=%s"
            try:
                db.cursor.execute(pinquery, (self.email,)) #fetching the hash from DB
                self.hash = db.cursor.fetchone()
                print("hash from db "+ self.hash[0])
            except:
                print("EXCEPTION\n")
                self.hash='NAN'

            if self.pin == self.hash[0]:
                #Password is correct, setting email and name and logging in.
                user.email=self.email
                userquery = "Select Firstname from User Where Email=%s"
                db.cursor.execute(userquery, (self.email,))
                user.name = db.cursor.fetchone()
                self.label.setText('Please enter your email:')
                self.emailShorts.show()
                self.state = '1'
                self.tries = 0
                self.hash = ''
                dmw.user_name.setText(user.name[0])
                dmf.hide()
                dmw.show()

            if self.pin != self.hash:
                self.tries = self.tries +1
                self.user_email.clear()
                self.label.setText("Wrong pin, try again.")
                if self.tries > 2:
                    self.emailShorts.show()
                    self.state='1'
                    self.hash = ''
                    self.label.setText('Please enter your email:')
                    self.tries=0
                    self.email = ''
                    self.hash = ''
                    dmf.hide()
                    dmw.show()



    def cancel(self):
        dmf.user_email.clear()
        dmf.hide()
        dmw.show()

    def LoginPushA(self):
        self.user_email.insert("a")

    def LoginPushB(self):
        self.user_email.insert("b")

    def LoginPushC(self):
        self.user_email.insert("c")

    def LoginPushD(self):
        self.user_email.insert("d")

    def LoginPushE(self):
        self.user_email.insert("e")

    def LoginPushF(self):
        self.user_email.insert("f")

    def LoginPushG(self):
        self.user_email.insert("g")

    def LoginPushH(self):
        self.user_email.insert("h")

    def LoginPushI(self):
        self.user_email.insert("i")

    def LoginPushJ(self):
        self.user_email.insert("j")

    def LoginPushK(self):
        self.user_email.insert("k")

    def LoginPushL(self):
        self.user_email.insert("l")

    def LoginPushM(self):
        self.user_email.insert("m")

    def LoginPushN(self):
        self.user_email.insert("n")

    def LoginPushO(self):
        self.user_email.insert("o")

    def LoginPushP(self):
        self.user_email.insert("p")

    def LoginPushQ(self):
        self.user_email.insert("q")

    def LoginPushR(self):
        self.user_email.insert("r")

    def LoginPushS(self):
        self.user_email.insert("s")

    def LoginPushT(self):
        self.user_email.insert("t")

    def LoginPushU(self):
        self.user_email.insert("u")

    def LoginPushV(self):
        self.user_email.insert("v")

    def LoginPushW(self):
        self.user_email.insert("w")

    def LoginPushX(self):
        self.user_email.insert("x")

    def LoginPushY(self):
        self.user_email.insert("y")

    def LoginPushZ(self):
        self.user_email.insert("z")

    def LoginPushAE(self):
        self.user_email.insert("æ")

    def LoginPushOE(self):
        self.user_email.insert("ø")

    def LoginPushAA(self):
        self.user_email.insert("å")

    def LoginPushDot(self):
        self.user_email.insert(".")

    def LoginPushDash(self):
        self.user_email.insert("-")

    def LoginPushAlpha(self):
        self.user_email.insert("@")

    def LoginPushOne(self):
        self.user_email.insert("1")

    def LoginPushTwo(self):
        self.user_email.insert("2")

    def LoginPushThree(self):
        self.user_email.insert("3")

    def LoginPushFour(self):
        self.user_email.insert("4")

    def LoginPushFive(self):
        self.user_email.insert("5")

    def LoginPushSix(self):
        self.user_email.insert("6")

    def LoginPushSeven(self):
        self.user_email.insert("7")

    def LoginPushEight(self):
        self.user_email.insert("8")

    def LoginPushNine(self):
        self.user_email.insert("9")

    def LoginPushZero(self):
        self.user_email.insert("0")

    def LoginPushDel(self):
        self.user_email.backspace()


class PinCode(QDialog, Ui_pincode):
    def __init__(self, parent=None):
        super(PinCode, self).__init__(parent)
        self.setupUi(self)
        self.pushbutton_ok.clicked.connect(self.submit)
        self.pushButton_cancel.clicked.connect(self.cancel)
        self.pushButton_one.clicked.connect(self.PinButtonOne)
        self.pushButton_two.clicked.connect(self.PinButtonTwo)
        self.pushButton_three.clicked.connect(self.PinButtonThree)
        self.pushButton_four.clicked.connect(self.PinButtonFour)
        self.pushButton_five.clicked.connect(self.PinButtonFive)
        self.pushButton_six.clicked.connect(self.PinButtonSix)
        self.pushButton_seven.clicked.connect(self.PinButtonSeven)
        self.pushButton_eight.clicked.connect(self.PinButtonEight)
        self.pushButton_nine.clicked.connect(self.PinButtonNine)
        self.pushButton_zero.clicked.connect(self.PinButtonZero)

    def PinButtonOne(self):
        self.pincode_entry.insert("1")

    def PinButtonTwo(self):
        self.pincode_entry.insert("2")

    def PinButtonThree(self):
        self.pincode_entry.insert("3")

    def PinButtonFour(self):
        self.pincode_entry.insert("4")

    def PinButtonFive(self):
        self.pincode_entry.insert("5")

    def PinButtonSix(self):
        self.pincode_entry.insert("6")

    def PinButtonSeven(self):
        self.pincode_entry.insert("7")

    def PinButtonEight(self):
        self.pincode_entry.insert("8")

    def PinButtonNine(self):
        self.pincode_entry.insert("9")

    def PinButtonZero(self):
        self.pincode_entry.insert("0")

    def submit(self):
        #print(self.pincode_entry.text())

        # hash pinentry and check against database. Run connect function in user if match.
        query_hash = "SELECT passwordhash FROM User WHERE Email = %s"
        db.cursor.execute(query_hash,(user.email,))
        try:
            dbhash=db.cursor.fetchone()
        except:
            dbhash=['NULL']

        #print("From db: " + str(dbhash[0]))
        print("From gui: " + self.pincode_entry.text())
        try:
            if self.pincode_entry.text() == str(dbhash[0]):
                #Test user name against pin(hash). If match the user.name is updated.
                #Gui-loginout_b button is renamed to "Logout"

                query_name = "SELECT Firstname FROM User WHERE Email = %s"
                db.cursor.execute(query_name,(user.email,))
                user.name=db.cursor.fetchone()
                dmw.user_name.setText(user.name[0])
                print("CORRECT PIN")
                #setting label for logout button.
                dmw.loginout_b.setText("Logout")
                #Set logged in.
        except:
            #Wrong login will cause a modest delay to avoid code guessing
            time.sleep(1)
            print("WRONG pin/user, you are reported to the CEO of spinbean!")

        dmp.hide()
        dmw.show()

    def cancel(self):
        dmp.hide()
        dmw.show()


class User:
    def __init__(self):
        self.email = "NULL"
        self.ordertype = "NULL"  # Int that is primary key in coffee table
        self.ordersize = "NULL"  # Int as in amount of grams.
        self.received = "NULL"  # Int as in grams received from machine. Should be >= ordersize unless empty/hw-issue.
        self.name = "NULL"  # Name to display whos logged in.
        self.verified = "0"  # Integer to show whether user has been verified.
        self.time = time.time()

    def resettime(self):
        self.time = time.time()

    def reset(self):
        self.__init__()


class RegisterUser(QDialog, Ui_RegisterUser):
    def __init__(self, parent=None):
        super(RegisterUser, self).__init__(parent)
        self.setupUi(self)
        self.state='1'
        self.fname=''
        self.sname=''
        self.email=''
        self.phone=''
        self.pushButton_previous.clicked.connect(self.previousinput)
        self.pushButton_Ok.clicked.connect(self.pushoknext)
        self.pushButton_del.clicked.connect(self.pushDel)
        self.pushButton_cancel.clicked.connect(self.pushCancel)
        self.pushButton_a.clicked.connect(self.pushA)
        self.pushButton_b.clicked.connect(self.pushB)
        self.pushButton_c.clicked.connect(self.pushC)
        self.pushButton_d.clicked.connect(self.pushD)
        self.pushButton_e.clicked.connect(self.pushE)
        self.pushButton_f.clicked.connect(self.pushF)
        self.pushButton_g.clicked.connect(self.pushG)
        self.pushButton_h.clicked.connect(self.pushH)
        self.pushButton_i.clicked.connect(self.pushI)
        self.pushButton_j.clicked.connect(self.pushJ)
        self.pushButton_k.clicked.connect(self.pushK)
        self.pushButton_l.clicked.connect(self.pushL)
        self.pushButton_m.clicked.connect(self.pushM)
        self.pushButton_n.clicked.connect(self.pushN)
        self.pushButton_o.clicked.connect(self.pushO)
        self.pushButton_p.clicked.connect(self.pushP)
        self.pushButton_q.clicked.connect(self.pushQ)
        self.pushButton_r.clicked.connect(self.pushR)
        self.pushButton_s.clicked.connect(self.pushS)
        self.pushButton_t.clicked.connect(self.pushT)
        self.pushButton_u.clicked.connect(self.pushU)
        self.pushButton_v.clicked.connect(self.pushV)
        self.pushButton_w.clicked.connect(self.pushW)
        self.pushButton_x.clicked.connect(self.pushX)
        self.pushButton_y.clicked.connect(self.pushY)
        self.pushButton_z.clicked.connect(self.pushZ)
        self.pushButton_oe.clicked.connect(self.pushOE)
        self.pushButton_ae.clicked.connect(self.pushAE)
        self.pushButton_aa.clicked.connect(self.pushAA)
        self.pushButton_zero.clicked.connect(self.pushZero)
        self.pushButton_one.clicked.connect(self.pushOne)
        self.pushButton_two.clicked.connect(self.pushTwo)
        self.pushButton_three.clicked.connect(self.pushThree)
        self.pushButton_four.clicked.connect(self.pushFour)
        self.pushButton_five.clicked.connect(self.pushFive)
        self.pushButton_six.clicked.connect(self.pushSix)
        self.pushButton_seven.clicked.connect(self.pushSeven)
        self.pushButton_eight.clicked.connect(self.pushEight)
        self.pushButton_nine.clicked.connect(self.pushNine)
        self.pushButton_alfa.clicked.connect(self.pushAlfa)
        self.pushButton_dot.clicked.connect(self.pushDot)
        self.pushButton_dash.clicked.connect(self.pushDash)


    #Input state 1,2,3,4 relates to firstname [1], surname [2], email[3], phone[4]

    def previousinput(self):
        if self.state=='1':
            print("At start")

        if self.state=='2':
            self.state='1'
            self.entrylabel.setText("First name:")
            self.entryinput.clear()
            self.entryinput.insert(self.fname)
            self.Infolabel.setText("<html><b> Is your First name correct? </b></html>")

        if self.state=='3':
            self.state='2'
            self.entrylabel.setText("Surname:")
            self.entryinput.clear()
            self.entryinput.insert(self.sname)
            self.Infolabel.setText("<html><b> Your surname please "+ self.fname + "</b></html>")

        if self.state=='4':
            self.state='3'
            self.entrylabel.setText("Email:")
            self.entryinput.clear()
            self.entryinput.insert(self.email)
            self.Infolabel.setText("<html><b> Is your email correct?</b></hml>")

        if self.state > '4':
            self.state ='4'
            self.entrylabel.setText("Phone:")
            self.Infolabel.setText("<html><b> Is your phone number correct?</b></html>")
            self.entryinput.setEchoMode(QLineEdit.Normal)

    def pushoknext(self):
        if self.state=='1':
            self.fname = self.entryinput.text()
            self.entrylabel.setText("Surname:")
            self.entryinput.clear()
            self.state='2'
            self.Infolabel.setText("<html><b> Hello " + self.fname +".<br> Please fill in your surname. </b></html>")
            print("Clicked ok")
            return

        if self.state == '2':
            self.sname = self.entryinput.text()
            self.entryinput.clear()
            self.entrylabel.setText("Email:")
            self.Infolabel.setText("<html><b> Thank you " + self.fname + " " +self.sname + ".<br> I will now need your: <br> Email and phone number.</b></html>")
            self.state = '3'
            return

        if self.state == '3':
            self.email = self.entryinput.text()
            self.entryinput.clear()
            self.entrylabel.setText("Phone:")
            self.state= '3.5'
            return

        if self.state == '3.5':
            self.phone=self.entryinput.text()
            self.entryinput.clear()
            self.Infolabel.setText("<html><b> " + self.fname + " " + self.sname + ", are your details correct?<br>"+
                                   " Email: "+ self.email +"<br>"+
                                   " Phone: "+ self.phone + "<br>"+
                                   " If correct, click OK. <br> Othervise click previous.</b></html>")
            self.state = '4'
            return

        if self.state == '4':
            #self.phone = self.entryinput.text()
            self.entryinput.clear()
            self.entryinput.setEchoMode(QLineEdit.Password)
            self.entrylabel.setText("Pincode:")
            self.Infolabel.setText("<html><b> Please select you pin code. <br> It is reckommended to use 4 digits.<br> Your pin will be stored in a secure way. ")
            print("Firstname = " + self.fname + " Surname = " + self.sname + " Email = " + self.email + " Phone = " + self.phone + "\n")
            self.state='5'
            return

        if self.state == '5':
            self.pin = self.entryinput.text()
            self.entryinput.clear()
            self.entrylabel.setText("Repeat Pincode:")
            #print(crypt.crypt(self.pin,self.email))
            self.state = '6'
            return

        if self.state == '6':
            if self.pin == self.entryinput.text():
                self.entryinput.setEchoMode(QLineEdit.Normal)
                self.entryinput.clear()
                self.pin=crypt.crypt(self.pin,self.email)
                print(self.pin)
                print("Pin match, hash pin and add to database")
                db.cursor.execute("Insert into User (Email,FirstName,Surname,Phone,Passwordhash) VALUES (%s,%s,%s,%s,%s)",(self.email, self.fname, self.sname, self.phone, self.pin))
                self.state = '1'
                self.entrylabel.setText("Welcome " +self.fname)
                self.Infolabel.setText("<html><b>Your account will be activated upon a manual email configuration.<b><html>")
                self.fname = ''
                self.sname = ''
                self.email = ''
                self.pin = ''
                time.sleep(4)
                self.entrylabel.setText("First name:")
                self.Infolabel.setText("")
                dmr.hide()
                dmw.show()
                #db.cursor.commit()
                return

            if self.pin != self.entryinput.text():
                print("Pin codes does not match, try again")
                self.state='4'
                self.pin = ''
                self.entrylabel.setText("Pin codes did not match, Try again:")
                self.entryinput.clear()
                return

    def pushCancel(self):
        self.fname = ''
        self.sname = ''
        self.email = ''
        self.phone = ''
        self.pin=''
        self.state='1'
        self.entryinput.clear()
        self.entryinput.setEchoMode(QLineEdit.Normal)
        self.Infolabel.setText("")
        self.entrylabel.setText("Firstname")
        dmr.hide()
        dmw.show()

    def pushDel(self):
        self.entryinput.backspace()

    def pushOE(self):
        self.entryinput.insert("ø")

    def pushAE(self):
        self.entryinput.insert("æ")

    def pushAA(self):
        self.entryinput.insert("å")

    def pushA(self):
        self.entryinput.insert("a")

    def pushB(self):
        self.entryinput.insert("b")

    def pushC(self):
        self.entryinput.insert("c")

    def pushD(self):
        self.entryinput.insert("d")

    def pushE(self):
        self.entryinput.insert("e")

    def pushF(self):
        self.entryinput.insert("f")

    def pushG(self):
        self.entryinput.insert("g")

    def pushH(self):
        self.entryinput.insert("h")

    def pushI(self):
        self.entryinput.insert("i")

    def pushJ(self):
        self.entryinput.insert("j")

    def pushK(self):
        self.entryinput.insert("k")

    def pushL(self):
        self.entryinput.insert("l")

    def pushM(self):
        self.entryinput.insert("m")

    def pushN(self):
        self.entryinput.insert("n")

    def pushO(self):
        self.entryinput.insert("o")

    def pushP(self):
        self.entryinput.insert("p")

    def pushQ(self):
        self.entryinput.insert("q")

    def pushR(self):
        self.entryinput.insert("r")

    def pushS(self):
        self.entryinput.insert("s")

    def pushT(self):
        self.entryinput.insert("t")

    def pushU(self):
        self.entryinput.insert("u")

    def pushV(self):
        self.entryinput.insert("v")

    def pushW(self):
        self.entryinput.insert("w")

    def pushX(self):
        self.entryinput.insert("x")

    def pushY(self):
        self.entryinput.insert("y")

    def pushZ(self):
        self.entryinput.insert("z")

    def pushZero(self):
        self.entryinput.insert("0")

    def pushOne(self):
        self.entryinput.insert("1")

    def pushTwo(self):
        self.entryinput.insert("2")

    def pushThree(self):
        self.entryinput.insert("3")

    def pushFour(self):
        self.entryinput.insert("4")

    def pushFive(self):
        self.entryinput.insert("5")

    def pushSix(self):
        self.entryinput.insert("6")

    def pushSeven(self):
        self.entryinput.insert("7")

    def pushEight(self):
        self.entryinput.insert("8")

    def pushNine(self):
        self.entryinput.insert("9")

    def pushAlfa(self):
        self.entryinput.insert("@")

    def pushDot(self):
        self.entryinput.insert(".")

    def pushDash(self):
        self.entryinput.insert("-")

    def pushZ(self):
        self.entryinput.insert("z")


class InitDB():
    # Evaluate whether this should be a continous database connection and not just init and also contain user.?
    def __init__(self, parent: object = None) -> object:
        #self.HostID = socket.gethostname()
        self.HostID = 'kopi'
        self.dbuser = mariadb.connect(user='sbm', password='987',
                                 database='spinbean_com')  # Set up database connection. Increase safety of pw.
        self.cursor = self.dbuser.cursor()  # Create cursor object for database interaction.

        # Define & execute sql queries for finding key of coffee on dispenser. Machine is found by HostID.
        coffe_in_machine_query = "SELECT * FROM Dispenser WHERE Machine=%s"
        self.cursor.execute(coffe_in_machine_query, (self.HostID,))
        self.coffe_id = self.cursor.fetchone()

        print(self.HostID)
        data = crypt.crypt(self.HostID, salt="cuffeluver")
        print(data)
        print(self.coffe_id)
        print(self.coffe_id[0])

        # SQL query for information of Premium coffee in Dispenser. Premium coffee is in first argument of coffe_id
        premium_coffee_query = "SELECT * FROM Coffee WHERE id=%s"
        self.cursor.execute(premium_coffee_query, (self.coffe_id[1],))
        premium_coffee = self.cursor.fetchone()
        print(premium_coffee)

        # SQL query for information of Economic coffee in Dispenser. Ecomonic will be third argument of coffe_id
        economic_coffee_query = "SELECT * FROM Coffee WHERE id=%s"
        self.cursor.execute(economic_coffee_query, (self.coffe_id[2],))
        economic_coffee = self.cursor.fetchone()
        print(economic_coffee)

        # Insert Premium cofee into main window (dmw) under the QTextedit CoffeA.
        dmw.Coffee_A.setText(
            "<html><b>" + premium_coffee[1] + " " + premium_coffee[2] + " - " + premium_coffee[3] + "<br>" +
            "Varietal: </b>" + premium_coffee[8] + "<br>" +
            "<b>Tasting notes: </b>" + premium_coffee[11] + "<br>" +
            "<b>Price: </b>" + str(premium_coffee[6] / 1000) + "  NOK/gram")

        dmw.Coffee_B.setText(
            "<html><b>" + economic_coffee[1] + " " + economic_coffee[2] + " - " + economic_coffee[3] + "<br>" +
            "Varietal: </b>" + economic_coffee[8] + "<br>" +
            "<b>Tasting notes: </b>" + economic_coffee[11] + "<br>" +
            "<b>Price: </b>" + str(economic_coffee[6] / 1000) + "  NOK/gram")

        dmw.user_name.setText(user.name)

        #This is only for testing against pincheck from other class


if __name__ == "__main__":
    app = QApplication(sys.argv)  # create the GUI application
    dmw = MainWindow()  # instantiate the main window
    dmf = UserLoginM()  # Window for typing in email.
    dmr = RegisterUser()# Register user and pincode
    user = User()       # Class for keeping user information during login session.
    db = InitDB()       # Class for database interaction.
    dmw.showFullScreen()          # show main window.
    sys.exit(app.exec_())
